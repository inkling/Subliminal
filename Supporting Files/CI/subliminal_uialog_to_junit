#!/usr/bin/python

import plistlib
import re
import datetime
import xml.etree.cElementTree as ET
from xml.dom import minidom
from optparse import OptionParser

def main(inputPath, outputPath):
    plist = plistlib.readPlist(inputPath)
    samples = plist['All Samples']
    root = ET.Element("testsuites")
    testSuite = None
    latestErrorMessage = None
    for sample in samples:
        message = sample['Message']
        logType = sample['LogType']
        if (logType == "Error"):
            latestErrorMessage = message
            continue

        # Test suites
        match = re.match('^Test "(.+)" (started|finished)', message)
        if (match is not None):
            testSuiteName = match.group(1)
            action = match.group(2)
            if (testSuiteName is not None):
                if (action == "started"):
                    testSuite = ET.SubElement(root, "testsuite")
                    testSuite.set("name", testSuiteName)

        # Test cases
        # NOTE: Don't change the order of "failed unexpectedly" and "failed" or
        # the regular expression matcher will always choose "failed" instead of
        # "failed unexpectedly."
        match = re.match('^Test case "[\+|\-]\[(.+) (.+)\]" (passed|failed\ unexpectedly|failed)', message)
        if (match is not None):
            testClassName = match.group(1)
            testCaseName = match.group(2)
            action = match.group(3)
            if (testClassName is not None):
                case = ET.SubElement(testSuite, "testcase")
                case.set("name", testCaseName)
                if (action == "failed"):
                    failure = ET.SubElement(case, "failure")
                    failure.set("message", latestErrorMessage)
                elif (action == "failed unexpectedly"):
                    error = ET.SubElement(case, "error")
                    error.set("message", latestErrorMessage)

        tree = ET.ElementTree(root)
        tree.write(outputPath)

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-i', '--input-file', action='store', dest='inputPath', metavar='foo.plist', help='input filepath')
    parser.add_option('-o', '--output-file', action='store', dest='outputPath', metavar='foo.xml', help='output filepath')
    (options, args) = parser.parse_args()
    if (options.inputPath is None or options.outputPath is None):
        parser.print_help()
        exit(1)

    main(options.inputPath, options.outputPath)
